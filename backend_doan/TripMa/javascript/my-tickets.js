// Bi·∫øn to√†n c·ª•c
let currentUser = null;
let allTickets = [];
let filteredTickets = [];
let currentEditingPassenger = null;

// API endpoints
const API_BASE = "http://localhost:3000/api";

// H√†m format ti·ªÅn t·ªá
function formatCurrency(amount) {
  return new Intl.NumberFormat("vi-VN").format(amount) + " VND";
}

// H√†m format th·ªùi gian
function formatTime(dateString) {
  const date = new Date(dateString);
  date.setHours(date.getHours() - 7); // üëà Tr·ª´ 7 ti·∫øng ƒë·ªÉ ƒë∆∞a v·ªÅ gi·ªù VN g·ªëc
  return date.toLocaleTimeString("vi-VN", {
    hour: "2-digit",
    minute: "2-digit",
    hour12: false,
  });
}

function formatDate(dateString) {
  const date = new Date(dateString);
  date.setHours(date.getHours() - 7); // üëà Tr·ª´ lu√¥n
  return date.toLocaleDateString("vi-VN");
}
// H√†m x√°c ƒë·ªãnh tr·∫°ng th√°i v√©
function getTicketStatus(departureTime) {
  if (!departureTime) return "unknown";

  const now = new Date();
  const departure = new Date(departureTime);

  if (departure > now) {
    return "upcoming";
  } else {
    return "completed";
  }
}

// H√†m l·∫•y th√¥ng tin user
function getCurrentUser() {
  try {
    // Debug: In ra t·∫•t c·∫£ d·ªØ li·ªáu trong localStorage
    console.log("=== DEBUG USER DATA ===");
    console.log("localStorage.user:", localStorage.getItem("user"));
    console.log("localStorage.userId:", localStorage.getItem("userId"));
    console.log("sessionStorage.user:", sessionStorage.getItem("user"));
    console.log("sessionStorage.userId:", sessionStorage.getItem("userId"));

    let user = JSON.parse(localStorage.getItem("user") || "{}");

    // X·ª≠ l√Ω c·∫•u tr√∫c d·ªØ li·ªáu user c√≥ th·ªÉ l√† { user: {...} } ho·∫∑c tr·ª±c ti·∫øp {...}
    if (user && user.user) {
      user = user.user;
    }

    // N·∫øu kh√¥ng c√≥ user trong localStorage, th·ª≠ sessionStorage
    if (!user || Object.keys(user).length === 0) {
      console.log(
        "Kh√¥ng t√¨m th·∫•y user trong localStorage, th·ª≠ sessionStorage..."
      );
      user = JSON.parse(sessionStorage.getItem("user") || "{}");
      if (user && user.user) {
        user = user.user;
      }
    }

    // Ki·ªÉm tra user c√≥ h·ª£p l·ªá kh√¥ng
    if (!user || Object.keys(user).length === 0) {
      console.log("Kh√¥ng t√¨m th·∫•y th√¥ng tin user trong storage");
      return null;
    }

    // ƒê·∫£m b·∫£o c√≥ ID_NguoiDung
    if (!user.ID_NguoiDung && !user.id) {
      const userId =
        localStorage.getItem("userId") || sessionStorage.getItem("userId");
      if (userId) {
        user.ID_NguoiDung = parseInt(userId);
      } else {
        console.log("Kh√¥ng t√¨m th·∫•y ID user");
        return null;
      }
    }

    // ƒê·∫£m b·∫£o c√≥ ID_NguoiDung t·ª´ user.id n·∫øu c·∫ßn
    if (!user.ID_NguoiDung && user.id) {
      user.ID_NguoiDung = user.id;
    }

    console.log("Final user object:", user);
    return user;
  } catch (error) {
    console.error("L·ªói khi l·∫•y th√¥ng tin user:", error);
    return null;
  }
}

// H√†m c·∫≠p nh·∫≠t th√¥ng tin user trong header
function updateUserInfo() {
  currentUser = getCurrentUser();

  const userNameEl = document.getElementById("user-name");
  const userEmailEl = document.getElementById("user-email");
  const userAvatarEl = document.getElementById("user-avatar");

  if (currentUser && (currentUser.hoTen || currentUser.HoTen)) {
    const fullName = currentUser.hoTen || currentUser.HoTen || "";
    const email = currentUser.email || currentUser.Email || "";

    if (userNameEl) userNameEl.textContent = fullName;
    if (userEmailEl) userEmailEl.textContent = email || "Ch∆∞a c√≥ email";
    if (userAvatarEl) {
      const firstLetter = fullName.charAt(0).toUpperCase();
      userAvatarEl.textContent = firstLetter || "U";
    }
  } else {
    if (userNameEl) userNameEl.textContent = "Kh√°ch";
    if (userEmailEl) userEmailEl.textContent = "Ch∆∞a ƒëƒÉng nh·∫≠p";
    if (userAvatarEl) userAvatarEl.textContent = "K";
  }
}

// H√†m l·∫•y danh s√°ch v√© t·ª´ API
async function loadUserTickets() {
  try {
    console.log("=== B·∫ÆT ƒê·∫¶U T·∫¢I V√â ===");

    // C·∫≠p nh·∫≠t th√¥ng tin user tr∆∞·ªõc
    currentUser = getCurrentUser();

    if (!currentUser) {
      console.error("getCurrentUser tr·∫£ v·ªÅ null");
      showEmptyState();
      return;
    }

    console.log("ƒêang t·∫£i v√© cho user:", currentUser);
    showLoadingState();

    // L·∫•y token t·ª´ localStorage
    const userData = JSON.parse(localStorage.getItem("user") || "{}");
    const token = userData.token;

    if (!token) {
      console.error("Kh√¥ng t√¨m th·∫•y token");
      alert("Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
      window.location.href = "../dangnhap/dangnhap.html";
      return;
    }

    const apiUrl = `${API_BASE}/ve/user`;
    console.log("API URL:", apiUrl);
    console.log("User ID:", currentUser.ID_User);

    const response = await fetch(apiUrl, {
      method: "GET",
      headers: {
        Authorization: `Bearer ${token}`,
        "Content-Type": "application/json",
      },
    });
    if (!response.ok) {
      if (response.status === 401) {
        alert("Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
        window.location.href = "../dangnhap/dangnhap.html";
        return;
      }
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    console.log("Response status:", response.status);
    console.log(
      "Response headers:",
      Object.fromEntries(response.headers.entries())
    );

    if (!response.ok) {
      if (response.status === 401) {
        alert("Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
        window.location.href = "../dangnhap/dangnhap.html";
        return;
      }
      const errorText = await response.text();
      console.error("API Error:", errorText);
      throw new Error(`HTTP error! status: ${response.status} - ${errorText}`);
    }

    const tickets = await response.json();
    console.log("Danh s√°ch v√© t·ª´ API:", tickets);
    console.log(
      "S·ªë l∆∞·ª£ng v√©:",
      Array.isArray(tickets) ? tickets.length : "Kh√¥ng ph·∫£i array"
    );

    // Ki·ªÉm tra c·∫•u tr√∫c d·ªØ li·ªáu v√©
    if (Array.isArray(tickets) && tickets.length > 0) {
      console.log("C·∫•u tr√∫c v√© ƒë·∫ßu ti√™n:", JSON.stringify(tickets[0], null, 2));
    }

    allTickets = Array.isArray(tickets) ? tickets : [];
    filteredTickets = [...allTickets];

    hideLoadingState();

    if (allTickets.length === 0) {
      console.log("Kh√¥ng c√≥ v√© n√†o, hi·ªÉn th·ªã empty state");
      showEmptyState();
    } else {
      console.log("Hi·ªÉn th·ªã", allTickets.length, "v√©");
      renderTickets(filteredTickets);
    }
  } catch (error) {
    console.error("L·ªói khi t·∫£i danh s√°ch v√©:", error);
    hideLoadingState();

    const errorMessage = error.message.includes("Failed to fetch")
      ? "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng."
      : `C√≥ l·ªói x·∫£y ra: ${error.message}`;

    alert(errorMessage);
    showEmptyState();
  }
}

// Hi·ªÉn th·ªã tr·∫°ng th√°i loading
function showLoadingState() {
  const loadingEl = document.getElementById("loading-state");
  const emptyEl = document.getElementById("empty-state");
  const ticketsListEl = document.getElementById("tickets-list");

  if (loadingEl) loadingEl.style.display = "block";
  if (emptyEl) emptyEl.style.display = "none";
  if (ticketsListEl) ticketsListEl.style.display = "none";
}

// ·∫®n tr·∫°ng th√°i loading
function hideLoadingState() {
  const loadingEl = document.getElementById("loading-state");
  if (loadingEl) loadingEl.style.display = "none";
}

// Hi·ªÉn th·ªã tr·∫°ng th√°i empty
function showEmptyState() {
  const emptyEl = document.getElementById("empty-state");
  const ticketsListEl = document.getElementById("tickets-list");

  if (emptyEl) emptyEl.style.display = "block";
  if (ticketsListEl) ticketsListEl.style.display = "none";
}

// Render danh s√°ch v√©
function renderTickets(tickets) {
  const ticketsListEl = document.getElementById("tickets-list");
  const emptyEl = document.getElementById("empty-state");

  if (!ticketsListEl) return;

  if (tickets.length === 0) {
    showEmptyState();
    return;
  }

  if (emptyEl) emptyEl.style.display = "none";
  ticketsListEl.style.display = "block";

  ticketsListEl.innerHTML = tickets
    .map((ticket) => createTicketCard(ticket))
    .join("");

  // G·∫Øn event listeners cho c√°c n√∫t
  attachTicketEventListeners();
}

// T·∫°o card v√©
function createTicketCard(ticket) {
  const status = getTicketStatus(ticket.ThoiGianKhoiHanh);
  const statusClass = `status-${status}`;
  const statusText =
    ticket.TrangThai ||
    (status === "upcoming"
      ? "S·∫Øp t·ªõi"
      : status === "completed"
      ? "ƒê√£ bay"
      : "ƒê√£ h·ªßy");

  const departureTime = formatTime(ticket.ThoiGianKhoiHanh);
  const arrivalTime = formatTime(ticket.ThoiGianHaCanh);
  const departureDate = formatDate(ticket.ThoiGianKhoiHanh);
  const arrivalDate = formatDate(ticket.ThoiGianHaCanh);
  const services = ticket.DichVu
    ? ticket.DichVu.map(
        (service) =>
          `<li>${service.TenDichVu} - ${formatCurrency(service.GiaDichVu)}</li>`
      ).join("")
    : "<li>Kh√¥ng c√≥ d·ªãch v·ª• b·ªï sung</li>";
  return `
        <div class="ticket-card" data-ticket-id="${ticket.ID_Ve}">
            <div class="ticket-header">
                <div class="ticket-info">
                    <div class="ticket-number">${ticket.ID_Ve}</div>
                    <div class="flight-route">
                        <span>${ticket.ThanhPhoDi}</span>
                        <span class="flight-arrow">‚úàÔ∏è</span>
                        <span>${ticket.ThanhPhoDen}</span>
                    </div>
                </div>
                <div class="ticket-status ${statusClass}">${statusText}</div>
            </div>

            <div class="ticket-body">
                <div class="flight-details">
                    <div class="flight-time">
                        <div class="time">${departureTime}</div>
                        <div class="date">${departureDate}</div>
                        <div class="airport">${ticket.TenSanBayDi}</div>
                    </div>

                    <div class="flight-duration">
                        <span>Chuy·∫øn bay ${ticket.ID_ChuyenBay}</span>
                    </div>

                    <div class="flight-time">
                        <div class="time">${arrivalTime}</div>
                        <div class="date">${arrivalDate}</div>
                        <div class="airport">${ticket.TenSanBayDen}</div>
                    </div>
                </div>

                <div class="passengers-section">
                    <div class="section-title">üë§ H√†nh kh√°ch</div>
                    <div class="passengers-list">
                        <div class="passenger-item">
                            <div class="passenger-info">
                                <div class="passenger-avatar">${
                                  ticket.HanhKhach?.HoTen?.charAt(0) || "H"
                                }</div>
                                <div class="passenger-details">
                                    <h4>${
                                      ticket.HanhKhach?.HoTen || "Ch∆∞a c√≥ t√™n"
                                    }</h4>
                                    <div class="passenger-meta">
                                        ${
                                          ticket.HanhKhach?.SoHoChieu_CCCD
                                            ? "CCCD: " +
                                              ticket.HanhKhach.SoHoChieu_CCCD
                                            : ""
                                        }
                                        ${
                                          ticket.HanhKhach?.SDT
                                            ? " ‚Ä¢ SƒêT: " + ticket.HanhKhach.SDT
                                            : ""
                                        }
                                    </div>
                                </div>
                            </div>
                            <div class="seat-info">
                                <div class="seat-number">S·ªë Gh·∫ø: ${
                                  ticket.Ghe?.SoGhe || "N/A"
                                }</div>
                                <div class="hang">H√†ng: ${
                                  ticket.Ghe?.Hang || "N/A"
                                }</div>
                                <div class="seat-class">Lo·∫°i Gh·∫ø: ${
                                  ticket.Ghe?.LoaiGhe || "Ph·ªï th√¥ng"
                                }</div>
                               
                            </div>
                        </div>
                    </div>
                </div>

                <div class="ticket-actions">
                    <div class="price-info">${formatCurrency(
                      ticket.GiaVe || 0
                    )}</div>
                    <div class="action-buttons">
                        <button class="btn btn-outline" onclick="viewTicketDetail('${
                          ticket.ID_Ve
                        }')">
                            üìÑ Chi ti·∫øt
                        </button>
                        ${
                          status === "upcoming"
                            ? `
                            <button class="btn btn-primary" onclick="downloadTicket('${ticket.ID_Ve}')">
                                üì• T·∫£i v√©
                            </button>
                        `
                            : ""
                        }
                    </div>
                </div>
            </div>
        </div>
    `;
}

// G·∫Øn event listeners
function attachTicketEventListeners() {
  // Event listeners ƒë√£ ƒë∆∞·ª£c g·∫Øn th√¥ng qua onclick trong HTML
  console.log("Event listeners ƒë√£ ƒë∆∞·ª£c g·∫Øn cho c√°c v√©");
}

// H√†m ch·ªânh s·ª≠a th√¥ng tin h√†nh kh√°ch
async function editPassenger(passengerId, ticketId) {
  try {
    console.log("Ch·ªânh s·ª≠a h√†nh kh√°ch:", passengerId, "c·ªßa v√©:", ticketId);

    // T√¨m th√¥ng tin h√†nh kh√°ch t·ª´ danh s√°ch v√©
    const ticket = allTickets.find((t) => t.ID_Ve === ticketId);
    if (!ticket || !ticket.HanhKhach) {
      alert("Kh√¥ng t√¨m th·∫•y th√¥ng tin h√†nh kh√°ch!");
      return;
    }

    const passenger = ticket.HanhKhach;
    currentEditingPassenger = { ...passenger, ticketId };

    // ƒêi·ªÅn th√¥ng tin v√†o form
    document.getElementById("edit-fullname").value = passenger.HoTen || "";
    document.getElementById("edit-dob").value = passenger.NgaySinh
      ? passenger.NgaySinh.split("T")[0]
      : "";
    document.getElementById("edit-gender").value = passenger.GioiTinh || "";
    document.getElementById("edit-id-number").value =
      passenger.SoHoChieu_CCCD || "";
    document.getElementById("edit-phone").value = passenger.SDT || "";
    document.getElementById("edit-email").value = passenger.Email || "";
    document.getElementById("edit-address").value = passenger.DiaChi || "";

    // Hi·ªÉn th·ªã modal
    const modal = document.getElementById("edit-passenger-modal");
    if (modal) modal.style.display = "flex";
  } catch (error) {
    console.error("L·ªói khi ch·ªânh s·ª≠a h√†nh kh√°ch:", error);
    alert("C√≥ l·ªói x·∫£y ra khi t·∫£i th√¥ng tin h√†nh kh√°ch!");
  }
}

// H√†m l∆∞u th√¥ng tin h√†nh kh√°ch ƒë√£ ch·ªânh s·ª≠a
async function savePassengerEdit() {
  try {
    if (!currentEditingPassenger) {
      alert("Kh√¥ng c√≥ th√¥ng tin h√†nh kh√°ch ƒë·ªÉ l∆∞u!");
      return;
    }

    const formData = {
      hoTen: document.getElementById("edit-fullname").value.trim(),
      ngaySinh: document.getElementById("edit-dob").value,
      gioiTinh: document.getElementById("edit-gender").value,
      soHoChieu_CCCD: document.getElementById("edit-id-number").value.trim(),
      sdt: document.getElementById("edit-phone").value.trim(),
      email: document.getElementById("edit-email").value.trim(),
      diaChi: document.getElementById("edit-address").value.trim(),
    };

    // Validate d·ªØ li·ªáu
    if (!formData.hoTen) {
      alert("Vui l√≤ng nh·∫≠p h·ªç t√™n!");
      return;
    }

    if (
      formData.soHoChieu_CCCD &&
      !/^\d{9}$|^\d{12}$/.test(formData.soHoChieu_CCCD)
    ) {
      alert("S·ªë CMND/CCCD ph·∫£i g·ªìm 9 ho·∫∑c 12 ch·ªØ s·ªë!");
      return;
    }

    if (formData.sdt && !/^0\d{9}$/.test(formData.sdt)) {
      alert("S·ªë ƒëi·ªán tho·∫°i ph·∫£i g·ªìm 10 s·ªë v√† b·∫Øt ƒë·∫ßu b·∫±ng s·ªë 0!");
      return;
    }

    // G·ª≠i API c·∫≠p nh·∫≠t
    const response = await fetch(
      `${API_BASE}/hanhkhach/${currentEditingPassenger.ID_HanhKhach}`,
      {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${localStorage.getItem("token") || ""}`,
        },
        body: JSON.stringify(formData),
      }
    );

    if (!response.ok) {
      const error = await response.json();
      throw new Error(error.message || "C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t th√¥ng tin");
    }

    const result = await response.json();
    console.log("C·∫≠p nh·∫≠t th√†nh c√¥ng:", result);

    // C·∫≠p nh·∫≠t d·ªØ li·ªáu local
    const ticketIndex = allTickets.findIndex(
      (t) => t.ID_Ve === currentEditingPassenger.ticketId
    );
    if (ticketIndex !== -1) {
      allTickets[ticketIndex].HanhKhach = {
        ...allTickets[ticketIndex].HanhKhach,
        ...formData,
      };

      // C·∫≠p nh·∫≠t filteredTickets n·∫øu c·∫ßn
      const filteredIndex = filteredTickets.findIndex(
        (t) => t.ID_Ve === currentEditingPassenger.ticketId
      );
      if (filteredIndex !== -1) {
        filteredTickets[filteredIndex].HanhKhach = {
          ...filteredTickets[filteredIndex].HanhKhach,
          ...formData,
        };
      }
    }

    // ƒê√≥ng modal v√† render l·∫°i
    closeEditModal();
    renderTickets(filteredTickets);

    alert("C·∫≠p nh·∫≠t th√¥ng tin h√†nh kh√°ch th√†nh c√¥ng!");
  } catch (error) {
    console.error("L·ªói khi l∆∞u th√¥ng tin h√†nh kh√°ch:", error);
    alert("C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t th√¥ng tin: " + error.message);
  }
}

// ƒê√≥ng modal ch·ªânh s·ª≠a
function closeEditModal() {
  const modal = document.getElementById("edit-passenger-modal");
  if (modal) modal.style.display = "none";
  currentEditingPassenger = null;
}

// Xem chi ti·∫øt v√©
async function viewTicketDetail(ticketId) {
  try {
    const apiUrl = `${API_BASE}/ve/chi-tiet/${ticketId}`;
    const response = await fetch(apiUrl, {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
      },
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error("API Error:", errorText);
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const ticketDetail = await response.json();
    console.log("Chi ti·∫øt v√©:", ticketDetail);

    // Hi·ªÉn th·ªã th√¥ng tin trong modal
    const modal = document.getElementById("ticket-detail-modal");
    const content = document.getElementById("ticket-detail-content");
    if (!modal || !content) return;

    content.innerHTML = `
      <div class="ticket-detail">
        <div class="detail-section">
          <h4>Th√¥ng tin v√©</h4>
          <div class="detail-grid">
            <div class="detail-item"><label>M√£ v√©:</label><span>${
              ticketDetail.ve.ID_Ve
            }</span></div>
            <div class="detail-item"><label>Gi√° v√©:</label><span>${formatCurrency(
              ticketDetail.chuyenBay.GiaCoSo
            )}</span></div>
            <div class="detail-item"><label>Tr·∫°ng th√°i:</label><span>${
              ticketDetail.ve.TrangThai
            }</span></div>
          </div>
        </div>

        <div class="detail-section">
          <h4>Th√¥ng tin chuy·∫øn bay</h4>
          <div class="detail-grid">
            <div class="detail-item"><label>M√£ chuy·∫øn bay:</label><span>${
              ticketDetail.chuyenBay.ID_ChuyenBay
            }</span></div>
            <div class="detail-item"><label>Kh·ªüi h√†nh:</label><span>${formatTime(
              ticketDetail.chuyenBay.ThoiGianKhoiHanh
            )} - ${formatDate(
      ticketDetail.chuyenBay.ThoiGianKhoiHanh
    )}</span></div>
            <div class="detail-item"><label>H·∫° c√°nh:</label><span>${formatTime(
              ticketDetail.chuyenBay.ThoiGianHaCanh
            )} - ${formatDate(
      ticketDetail.chuyenBay.ThoiGianHaCanh
    )}</span></div>
            <div class="detail-item"><label>S√¢n bay ƒëi:</label><span>${
              ticketDetail.sanBayDi.TenSanBay
            } (${ticketDetail.sanBayDi.ThanhPho})</span></div>
            <div class="detail-item"><label>S√¢n bay ƒë·∫øn:</label><span>${
              ticketDetail.sanBayDen.TenSanBay
            } (${ticketDetail.sanBayDen.ThanhPho})</span></div>
          </div>
        </div>

        <div class="detail-section">
          <h4>Th√¥ng tin gh·∫ø</h4>
          <div class="detail-grid">
            <div class="detail-item"><label>S·ªë gh·∫ø:</label><span>${
              ticketDetail.ghe.SoGhe
            }</span></div>
            <div class="detail-item"><label>Lo·∫°i gh·∫ø:</label><span>${
              ticketDetail.ghe?.loaiGhe?.TenLoai || "Kh√¥ng x√°c ƒë·ªãnh"
            }</span></div>
          </div>
        </div>

        <div class="detail-section">
          <h4>Th√¥ng tin h√†nh kh√°ch</h4>
          <div class="detail-grid">
            <div class="detail-item"><label>H·ªç t√™n:</label><span>${
              ticketDetail.hanhKhach.HoTen
            }</span></div>
            <div class="detail-item"><label>Ng√†y sinh:</label><span>${formatDate(
              ticketDetail.hanhKhach.NgaySinh
            )}</span></div>
            <div class="detail-item"><label>CMND/CCCD:</label><span>${
              ticketDetail.hanhKhach.SoHoChieu_CCCD
            }</span></div>
            <div class="detail-item"><label>S·ªë ƒëi·ªán tho·∫°i:</label><span>${
              ticketDetail.hanhKhach.SDT
            }</span></div>
            <div class="detail-item"><label>Email:</label><span>${
              ticketDetail.hanhKhach.Email
            }</span></div>
          </div>
        </div>

        <div class="detail-section">
          <h4>D·ªãch v·ª• b·ªï sung</h4>
          <ul>
            ${ticketDetail.dichVus
              .map(
                (dv) =>
                  `<li>${dv.TenDichVu} - ${formatCurrency(dv.GiaDichVu)}</li>`
              )
              .join("")}
          </ul>
        </div>

        <div class="detail-section">
          <h4>Th√¥ng tin h√≥a ƒë∆°n</h4>
          <div class="detail-grid">
            <div class="detail-item"><label>M√£ h√≥a ƒë∆°n:</label><span>${
              ticketDetail.hoaDon?.ID_HoaDon || "N/A"
            }</span></div>
            <div class="detail-item"><label>T·ªïng ti·ªÅn:</label><span>${formatCurrency(
              ticketDetail.hoaDon?.TongTien || 0
            )}</span></div>
          </div>
          <h5>Chi ti·∫øt thanh to√°n</h5>
          <ul>
            ${ticketDetail.chiTietThanhToan
              .map(
                (ct) =>
                  `<li>${ct.TenPhuongThuc} - ${formatCurrency(ct.SoTien)}</li>`
              )
              .join("")}
          </ul>
        </div>
      </div>
    `;

    modal.style.display = "flex";
  } catch (error) {
    console.error("L·ªói khi l·∫•y chi ti·∫øt v√©:", error);
    alert("Kh√¥ng th·ªÉ t·∫£i chi ti·∫øt v√©. Vui l√≤ng th·ª≠ l·∫°i sau.");
  }
}
// T·∫£i v√©
function downloadTicket(ticketId) {
  // T·∫°m th·ªùi ch·ªâ hi·ªÉn th·ªã th√¥ng b√°o
  alert(
    `T√≠nh nƒÉng t·∫£i v√© ${ticketId} s·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn trong phi√™n b·∫£n ti·∫øp theo!`
  );
}

// H√†m t√¨m ki·∫øm v√† l·ªçc
function setupSearchAndFilter() {
  const searchInput = document.getElementById("search-input");
  const filterBtns = document.querySelectorAll(".filter-btn");

  // T√¨m ki·∫øm
  if (searchInput) {
    searchInput.addEventListener("input", function () {
      const searchTerm = this.value.toLowerCase().trim();
      filterTickets(searchTerm, getActiveFilter());
    });
  }

  // L·ªçc theo tr·∫°ng th√°i
  filterBtns.forEach((btn) => {
    btn.addEventListener("click", function () {
      // C·∫≠p nh·∫≠t active state
      filterBtns.forEach((b) => b.classList.remove("active"));
      this.classList.add("active");

      const status = this.dataset.status;
      const searchTerm = searchInput
        ? searchInput.value.toLowerCase().trim()
        : "";
      filterTickets(searchTerm, status);
    });
  });
}

// L·∫•y filter ƒëang active
function getActiveFilter() {
  const activeBtn = document.querySelector(".filter-btn.active");
  return activeBtn ? activeBtn.dataset.status : "all";
}

// L·ªçc v√©
function filterTickets(searchTerm, statusFilter) {
  let filtered = [...allTickets];

  // L·ªçc theo t√¨m ki·∫øm
  if (searchTerm) {
    filtered = filtered.filter((ticket) => {
      return (
        ticket.ID_Ve.toString().toLowerCase().includes(searchTerm) ||
        ticket.ID_ChuyenBay.toString().toLowerCase().includes(searchTerm) ||
        (ticket.HanhKhach?.HoTen || "").toLowerCase().includes(searchTerm) ||
        (ticket.SanBayDi?.ThanhPho || "").toLowerCase().includes(searchTerm) ||
        (ticket.SanBayDen?.ThanhPho || "").toLowerCase().includes(searchTerm)
      );
    });
  }

  // L·ªçc theo tr·∫°ng th√°i
  if (statusFilter !== "all") {
    filtered = filtered.filter((ticket) => {
      if (statusFilter === "upcoming") {
        return new Date(ticket.ThoiGianKhoiHanh) > new Date();
      } else if (statusFilter === "completed") {
        return new Date(ticket.ThoiGianKhoiHanh) <= new Date();
      } else if (statusFilter === "cancelled") {
        return ticket.TrangThai === "ƒê√£ h·ªßy";
      }
      return true;
    });
  }

  filteredTickets = filtered;
  renderTickets(filteredTickets);
}

// Kh·ªüi t·∫°o khi DOM loaded
document.addEventListener("DOMContentLoaded", function () {
  console.log("Trang v√© ƒë√£ ƒë·∫∑t ƒë√£ t·∫£i");

  // Ki·ªÉm tra user
  const user = getCurrentUser();
  if (!user) {
    console.log("Kh√¥ng c√≥ th√¥ng tin user, c·∫ßn ƒëƒÉng nh·∫≠p");
    alert("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ xem v√© ƒë√£ ƒë·∫∑t");
    // Redirect v·ªÅ trang ƒëƒÉng nh·∫≠p ho·∫∑c trang ch·ªß
    window.location.href = "html/dangnhap/dangnhap.html";
    return;
  }

  // C·∫≠p nh·∫≠t th√¥ng tin user
  updateUserInfo();

  // Thi·∫øt l·∫≠p event listeners
  setupEventListeners();

  // Thi·∫øt l·∫≠p t√¨m ki·∫øm v√† l·ªçc
  setupSearchAndFilter();

  // T·∫£i danh s√°ch v√©
  loadUserTickets();
});

// Thi·∫øt l·∫≠p event listeners
function setupEventListeners() {
  // N√∫t quay l·∫°i
  const backBtn = document.getElementById("back-button");
  if (backBtn) {
    backBtn.addEventListener("click", function () {
      window.history.back();
    });
  }

  // ƒê√≥ng modal ch·ªânh s·ª≠a
  const closeEditBtn = document.getElementById("close-edit-modal");
  const cancelEditBtn = document.getElementById("cancel-edit");
  if (closeEditBtn) closeEditBtn.addEventListener("click", closeEditModal);
  if (cancelEditBtn) cancelEditBtn.addEventListener("click", closeEditModal);

  // ƒê√≥ng modal chi ti·∫øt
  const closeDetailBtn = document.getElementById("close-detail-modal");
  if (closeDetailBtn) {
    closeDetailBtn.addEventListener("click", function () {
      const modal = document.getElementById("ticket-detail-modal");
      if (modal) modal.style.display = "none";
    });
  }

  // Form ch·ªânh s·ª≠a h√†nh kh√°ch
  const editForm = document.getElementById("edit-passenger-form");
  if (editForm) {
    editForm.addEventListener("submit", function (e) {
      e.preventDefault();
      savePassengerEdit();
    });
  }

  // ƒê√≥ng modal khi click outside
  window.addEventListener("click", function (e) {
    const editModal = document.getElementById("edit-passenger-modal");
    const detailModal = document.getElementById("ticket-detail-modal");

    if (e.target === editModal) {
      closeEditModal();
    }

    if (e.target === detailModal) {
      detailModal.style.display = "none";
    }
  });
}

// Export c√°c h√†m ƒë·ªÉ s·ª≠ d·ª•ng trong HTML
window.editPassenger = editPassenger;
window.viewTicketDetail = viewTicketDetail;
window.downloadTicket = downloadTicket;
